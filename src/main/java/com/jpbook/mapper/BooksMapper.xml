<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.jpbook.dao.BooksDao">
    <select id="queryRecommend" parameterType="Integer" resultType="map">
        select b.*,u.uname,bt.btname,r.retype from books b inner join users u on b.uuid = u.uuid inner join recommend r on b.bookid = r.rebookid inner join booktype bt on b.btid = bt.btid
        where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(r.redate) and r.retype=#{param1} order by r.retype
        limit #{param2},#{param3}
    </select>


    <select id="queryClick" parameterType="Integer" resultType="map">
        select b.bookid,b.bookname,b.icon,bt.btname,u.uname,sum(c.cnum) cnum from books b inner join click c on b.bookid = c.bookid inner join users u on c.uuid = u.uuid
        inner join booktype bt on b.btid = bt.btid where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(c.clicktime)
        GROUP BY b.bookid,b.bookname,u.uname,bt.btname order by cnum desc
    </select>
    <select id="queryBtype" resultType="map">
        select b.bookid,bt.btid,b.bookname,bt.btname from books b inner join booktype bt on b.btid = bt.btid where b.bookstate=0
        group by b.bookid order by bt.btname limit 0,37
    </select>
    <select id = "queryNewBooks" resultType="map">
        select b.bookname,b.icon,b.bookreferral,u.uname,bt.btid,rpad(SUBSTRING(c.chapcount,1,1),CHAR_LENGTH(SUBSTRING(c.chapcount,1)),0) chapcount
        from books b inner join booktype bt on b.btid = bt.btid inner join users u on u.uuid = b.uuid inner join roll r on r.bookid = b.bookid
        inner join chapter c on c.rollid = r.rollid WHERE b.bookstate=0 and YEARWEEK(date_format(b.createtime,'%Y-%m-%d')) = YEARWEEK(now()) ;
    </select>
    <select id = "queryQianli" resultType="map">
        select b.bookname,b.bookid,bt.btid,bt.btname,u.uname,u.uuid,b.icon,sum(c.cnum*5) qianli from books b inner join booktype bt on b.btid = bt.btid inner join users u on b.uuid = u.uuid right join click c on c.bookid = b.bookid
        where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(b.createtime) and b.bookstate=0
        group by b.bookname order by qianli desc
    </select>
    <select id="queryWanben" resultType="map">
        select b.bookid,b.bookname,b.icon,b.bookreferral,u.uname,bt.btid,bt.btname,
        case CHAR_LENGTH(SUBSTRING(sum(c.chapcount),2))
        when 0 then 0
        when 3 then CONCAT(cast(SUBSTRING(sum(c.chapcount),1,1) as CHAR),'千')
        when 2 then CONCAT(cast(SUBSTRING(sum(c.chapcount),1,1) as CHAR),'百')
        when 4 then CONCAT(cast(SUBSTRING(sum(c.chapcount),1,1) as CHAR),'万')
        when 5 then CONCAT(cast(SUBSTRING(sum(c.chapcount),1,1) as CHAR),'十万')
        when 6 then CONCAT(cast(SUBSTRING(sum(c.chapcount),1,1) as CHAR),'百万') end chapcount
        from books b inner join booktype bt on b.btid = bt.btid inner join users u on u.uuid = b.uuid inner join roll r on r.bookid = b.bookid
        inner join chapter c on c.rollid = r.rollid WHERE b.bookstate = 0 group by b.bookid order by chapcount desc
    </select>
    <select id ="queryJingwan" resultType="map">
        select b.bookid,b.bookname,b.icon,b.bookreferral,u.uname,bt.btname,bt.btid,
        case CHAR_LENGTH(SUBSTRING(sum(c.chapcount),2))
        when 0 then 0
        when 3 then CONCAT(cast(SUBSTRING(sum(c.chapcount),1,1) as CHAR),'千')
        when 2 then CONCAT(cast(SUBSTRING(sum(c.chapcount),1,1) as CHAR),'百')
        when 4 then CONCAT(cast(SUBSTRING(sum(c.chapcount),1,1) as CHAR),'万')
        when 5 then CONCAT(cast(SUBSTRING(sum(c.chapcount),1,1) as CHAR),'十万')
        when 6 then CONCAT(cast(SUBSTRING(sum(c.chapcount),1,1) as CHAR),'百万') end chapcount
        from books b inner join booktype bt on b.btid = bt.btid inner join users u on u.uuid = b.uuid inner join roll r on r.bookid = b.bookid
        inner join chapter c on c.rollid = r.rollid WHERE b.bookstate = 1 and DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(b.endtime)
        group by b.bookid order by chapcount desc
    </select>
    <select id="queryBookById" parameterType="Integer" resultType="map">
        select b.bookid,b.bookname,b.icon,u.uname,u.pen,b.bookreferral,case bookstate when 0 then '连载' when 1 then '完本' end bookstate,bt.btid,bt.btname,ifnull(case CHAR_LENGTH(SUBSTRING(sum(c.chapcount),2))
        when 0 then 0
        when 3 then CONCAT(cast(SUBSTRING(sum(c.chapcount),1,1) as CHAR),'千')
        when 2 then CONCAT(cast(SUBSTRING(sum(c.chapcount),1,1) as CHAR),'百')
        when 4 then CONCAT(cast(SUBSTRING(sum(c.chapcount),1,1) as CHAR),'万')
        when 5 then CONCAT(cast(SUBSTRING(sum(c.chapcount),1,1) as CHAR),'十万')
        when 6 then CONCAT(cast(SUBSTRING(sum(c.chapcount),1,1) as CHAR),'百万') end,0) chapcount,ifnull(sum(ck.cnum),0) cnum,count(c.chapid) chapid,ifnull(s.chapnum,0) chapnum,ifnull(s.chapname,'暂时没有章节') chapname,
        cou.chapscount,ifnull(s.chaptime,'') chaptime,ifnull(reviewcount,0) reviewcount
        from books b inner join booktype bt on b.btid = bt.btid join users u on b.uuid = u.uuid left join roll r on r.bookid = b.bookid left join chapter c
        on r.rollid = c.rollid left join click ck on b.bookid = ck.bookid left join (select bookid,count(revid) reviewcount from reviewbook where retype = 1 and bookid = #{param1}
        ) re on re.bookid=b.bookid,(select b.bookid,b.bookname,r.rollname,c.chaptime,c.chapname,c.chapnum from books b left join roll r on b.bookid = r.bookid left join chapter c on c.rollid = r.rollid where b.bookid = #{param1} order by r.rollid desc,c.chapnum desc limit 0,1) s,(select count(b.bookid) chapscount,b.bookname,r.rollname,c.chapname,c.chapnum from books b inner join roll r on b.bookid = r.bookid inner join chapter c on c.rollid = r.rollid where b.bookid =#{param1} order by c.chapnum desc) cou
        where b.bookid = #{param1}
        group by re.bookid
    </select>
    <select id="queryUsers" parameterType="Integer" resultType="map">
        select ifnull(u.icon,'../images/0.jpg') icon,u.uuid,u.uname,ifnull(u.self,'谁知道他很懒，没有想告诉你们的呢...') self,c.bookcount,f.chaptercount,t.days from users u,(select *,count(bookid) bookcount from books where uuid = (select uuid from users where uuid = (select uuid from books where bookid = #{param1}))) c,(select round(sum(chapcount)/10000,2) chaptercount from chapter where rollid in (select rollid from roll where bookid in (select bookid from books where uuid = (select uuid from users where uuid = (select uuid from books where bookid = #{param1}))))) f,(select count(c.chaptime) days from books b left join roll r on r.bookid = b.bookid left join chapter c on c.rollid = r.rollid
        where b.bookid = #{param1} and date_format(c.chaptime,'%Y%m') = date_format(curdate(),'%Y%m')) t
        where c.uuid = u.uuid
    </select>
    <select id = "queryReviewbook" parameterType="Integer" resultType="map">
        select s1.*,ifnull(s2.zan,0) zan
        from
        (select u.uuid,u.uname,ifnull(u.icon,'../images/0.jpg') icon,rb.revvlue,count(rp.revid) rqcount,rb.commenttime,rb.revid from users u left join reviewbook rb on u.uuid = rb.uuid left join rbreply rp on rb.revid = rp.revid
        where rb.retype = 1 and rb.bookid = #{param1}
        group by rb.revid) s1 left join
        (select reviewid,count(zanid) zan from zan where zantype=1 and zstate = 1 GROUP BY reviewid) s2 on s2.reviewid=s1.revid
    </select>
    <select id = "queryRolls" resultType="map" parameterType="Integer">
        select ifnull(r.rollid,0) rollid,ifnull(r.rollname,'暂时还没有章节') rollname,count(c.chapid) sumchap,ifnull(sum(c.chapcount),0) chapcounts,r.rollmoney,case r.rollmoney when 1 then 'free' when 2 then 'vip' end rollstate from books b left join roll r on b.bookid = r.bookid left join chapter c on c.rollid = r.rollid
        where b.bookid = #{param1} group by r.rollid
        order by r.rollnum
    </select>
    <select id = "queryChapters" parameterType="Integer" resultType="map">
        select b.bookid,r.rollid,r.rollname,c.chapid,c.chapnum,ifnull(c.chapname,'作者很懒还没有设置名字') chapname,c.chaptime,c.chapcount,ifnull(c.url,'javascript:void(0)') url,case r.rollmoney when 1 then '免费' when 2 then '收费' end vip,ifnull(bd.uuid,0) uuid from books b left join roll r on b.bookid = r.bookid left join chapter c on c.rollid = r.rollid left join buyrecord bd on bd.chapid = c.chapid and bd.uuid = #{param2}
        where b.bookid = #{param1}
        order by r.rollid,c.chapnum
    </select>
    <select id = "queryBuy" resultType="map" parameterType="Integer">
        select * from buyrecord where uuid = #{param1}
    </select>

    <select id = "queryZanById" resultType="map" parameterType="Integer">
        select * from zan where uuid = #{param1} and zantype = 1
    </select>
    <select id="zanExist" parameterType="Integer" resultType="com.jpbook.entity.Zan">
        select * from zan where reviewid = #{param1} and uuid = #{param2} and zantype = 1
    </select>
    <update id="editZan" parameterType="Integer">
        update zan set zstate = #{param2} where reviewid = #{param1} and uuid = #{param3}
    </update>
    <insert id="addZan" parameterType="Integer">
        insert into zan values(null,#{param1},1,#{param2},1)
    </insert>
    <select id="queryBookByState" resultType="Map">
        select * from (
        select bs.bookid,bs.icon,bs.bookname,bs.uuid,u.pen,r.rollmoney,max(c.updatetime) updatetime,bt.btid,bs.bookstate,(case when bs.bookstate=0 then '连载中' else '完结' end) bookstatename,bs.bookreferral,bt.btname,IFNULL(sum(c.chapcount),0) sum from
        books bs LEFT JOIN users u on bs.uuid=u.uuid left join booktype bt on bs.btid=bt.btid LEFT JOIN roll r on bs.bookid=r.bookid LEFT JOIN chapter c on r.rollid =c.rollid
        GROUP BY bs.bookid) s
        <where>
            <if test="param3!=null">
                and s.btid=#{param3}
            </if>
            <if test="param4!=null">
                and s.bookstate=#{param4}
            </if>
            <if test="param5!=null">
                and s.rollmoney=#{param5}
            </if>
            <if test="param6!=null">
                and s.updatetime > date_sub(SYSDATE(),interval #{param6} day)
            </if>
            <if test="param7!=null">
                and s.sum&gt;#{param7}
            </if>
            <if test="param8!=null">
                and s.sum&lt;#{param8}
            </if>
        </where>
        LIMIT #{param1},#{param2}
    </select>
</mapper>